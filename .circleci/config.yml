version: 2.1

executors:
  minimal-executor:
    docker:
      - image: cimg/base:stable

  python-service-executor:
    docker:
      - image: cimg/python:3.11
      - image: localstack/localstack:latest
        name: localstack
        environment:
          SERVICES: s3,secretsmanager
          EDGE_PORT: 4566
      - image: postgres:13
        name: postgres
        environment:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db

jobs:
  detect-changes:
    executor: minimal-executor
    steps:
      - checkout
      - run:
          name: Detect Changed Services and Markets
          command: |
            git fetch origin main
            
            # Create temp files
            echo "" > /tmp/changed_services.txt
            echo "" > /tmp/schema_changes.txt
            
            # Detect schema changes (db_migrations/market/service)
            git diff --name-only origin/main | grep '^db_migrations/' || true | while read -r file; do
              if [[ $file =~ ^db_migrations/([^/]+)/([^/]+)/ ]]; then
                market="${BASH_REMATCH[1]}"
                service="${BASH_REMATCH[2]}"
                echo "Found changes for market: $market, service: $service"
                
                # Add market for schema deployment
                echo "$market" >> /tmp/schema_changes.txt
                # Add service/market pair for tests
                echo "$service/$market" >> /tmp/changed_services.txt
              fi
            done
            
            # Detect service changes (src/service/market)
            git diff --name-only origin/main | grep '^src/' || true | while read -r file; do
              if [[ $file =~ ^src/([^/]+)/([^/]+)/ ]]; then
                service="${BASH_REMATCH[1]}"
                market="${BASH_REMATCH[2]}"
                
                # Skip if it's the common directory
                if [[ "$market" == "common" ]]; then
                  # Add service-only changes (for testing/linting but no schema deployment)
                  echo "$service/common" >> /tmp/changed_services.txt
                  continue
                fi
                
                echo "$service/$market" >> /tmp/changed_services.txt
              fi
            done
            
            # Combine unique changes
            cat /tmp/schema_changes.txt >> /tmp/changed_services.txt
            sort -u /tmp/changed_services.txt -o /tmp/changed_services.txt
            
            # Store schema changes separately for deployment step
            sort -u /tmp/schema_changes.txt -o /tmp/schema_changes.txt
            
            if [ -s /tmp/changed_services.txt ]; then
              echo "Changed service/markets:"
              cat /tmp/changed_services.txt
              echo "Schema changes:"
              cat /tmp/schema_changes.txt
            else
              echo "No changes detected in src/ or db_migrations/ directories"
            fi
      - persist_to_workspace:
          root: /tmp
          paths:
            - changed_services.txt
            - schema_changes.txt

  test-lint-checks:
    parameters:
      service:
        type: string
    executor: python-service-executor
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Check if service needs testing
          command: |
            if ! grep -q "^<< parameters.service >>/" /tmp/changed_services.txt; then
              echo "No changes detected for << parameters.service >>. Skipping..."
              circleci-agent step halt
            fi
      - checkout
      - run:
          name: Install requirements
          command: |
            pip install -r requirements.txt
      - run:
          name: Install Sqitch
          command: |
            sudo apt-get update && sudo apt-get install -y sqitch libpq-dev
      - run:
          name: Deploy Database Schemas
          command: |
            while IFS= read -r market; do
              if [ -n "$market" ]; then
                echo "Deploying all schemas for market $market"
                cd "db_migrations/$market"
                for schema_dir in */; do
                  if [ -d "$schema_dir" ] && [ -f "$schema_dir/sqitch.plan" ]; then
                    service=${schema_dir%/}
                    echo "Deploying schema for $service"
                    sqitch deploy --chdir "$service" || exit 1
                  fi
                done
                cd ../..
              fi
            done < /tmp/schema_changes.txt
      - run:
          name: Run tests and lint checks
          command: |
            chmod +x src/etl/test_and_lint_checks.sh
            ./src/etl/test_and_lint_checks.sh

workflows:
  version: 2
  main-pipeline:
    jobs:
      - detect-changes
      - test-lint-checks:
          name: test-etl
          service: etl
          requires:
            - detect-changes
      - test-lint-checks:
          name: test-forecast
          service: forecast
          requires:
            - detect-changes
